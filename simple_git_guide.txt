*** Download git from here : https://git-scm.com/download/win
*** Then install
*** If there is any problem watch this : https://www.youtube.com/watch?v=SmbAn2_5uGs

1. Create a folder anywhere.

2. Create a txt file. I created "first.txt".

3. Now, right click on mouse in that folder and click on "Git Bash Here".[for windows user only]
	*** linux user just open terminal
4. A command promt [ Git bash ] will open which is used to perform various version controlling operation.

5. First we have to get logged in. For this we nedd to write on that cmd:
		
		i)	git config --global user.email "abcd@gmail.com"
		
		ii)	git config --global user.name "something"
		
		**** Any valid email address and username can be used.
		**** if you want to configure this only for specific repo just remove the --global from avove command. and run it.
6. Now we are ready to perform version controlling. At first we have to create a git repository by using this command:
		i)  git init
		*** After this an empty repository is created.




---------------------------------------Git Work Flow------------------------------------------------



7. In git there are three types of things we have to deal with:  

        ****[ https://www.quora.com/What-is-the-meaning-of-commit-and-stage-in-git ]

		i)  Working copy: 
		When we create a file it remains in the working copy. Here, "first.txt" is in working copy now.

		ii) Staging area: 
		When we use "git add ." cmd then all files in the current directory goes to staging area. Now, open the             "first.txt" file and write something on it. I write "Thsi is my first git prac from master." Then write this cmd in git bash:
			a)  git add .
			this cmd(a)  adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit.
			So, the first.txt file is now in the staging area.

		iii) Git Repository: It stores the current contents of the index/staging area in a new commit along with a log message from the user describing the changes. So, commit means takes a snap shot of files and save it in the repository finally.
		So, we have to commit by using this command:

		a) git commit -m "This is my first commit"
		here, "This is my first commit" is the commiting message, anything can be written.
		After writing this command all files are saved in git repository.

		We can watch commit history by using :
		a) git log
		or only for specific author's commit history,
		a) git log --author="author's username"



---------------------------------------Work Flow End-------------------------------------------------------




----------------------------------------- Git Branch------------------------------------------------------

8. By default when we initiate a git repository we are in master branch. To check this write:

		i) git branch
		this cmd shows the names of branches. As we didn't create any branch it will show only "master" branch.

9. To creat a new branch from current branch :

		i) git branch slave
		This cmd create a new branch named "slave" from current branch [ we are currently in master branch]. 
		To find out if the new branch is created or not use this cmd: git branch
		it will show the names of branches and an asteric symbol beside the current branch name.

10. Now, if we want to go another branch [slave] from current branch [master] :
		i) git checkout slave
		after writing this, we are in  the slave branch which is the copy of master branch because we create slave branch from master branch.

11. This time open the "first.txt" file and you can see the same thing that was in the master branch. Now change the text. I add 
a new line "I am from slave" after the existing line and save this. Now, we have to commit these changes to the current slave branch. So, write:

	i)  git add .
	ii) git commit -m "This is my first commit from slave"		

12. To understand the branching effect we have to go to the master branch using:
    i) git checkout master
    Now open the "first.txt" file you only find the text "Thsi is my first git 
    prac." that we wrote and commit when we were in the master branch.

13. To delete any branch use :
    i) git branch -D Branch_Name

   


    -------------------------------------Branch End-------------------------------------

------------------------------------------Merge--------------------------------------------------------

 14. In projects we nedd the change or updated codes from one branch to another. Like , If we want to get the changes from 
 slave branch to master branch. To do this we have to merge them. 
 First we have to go master branch, so write: 
     i)  git checkout master
     now we are in the master branch. We want here the update from slave branch. So write:
     ii) git merge slave 
     We are done. Open the file First.txt and find the magic of git :) .
 But there are some situations where merge conflict occurs, 
 read here  [ https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging ]  for more information.
 
 
 
 ---------------------------------------Merge End-----------------------------------------------------------
 
 
 -----------------------upload from desktop to github--------------------------------------------------------------
 https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
 https://help.github.com/articles/adding-a-remote/
 
 
 -------------------------------------RESEt-------------------------------------------------------------------

*******Read this : https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/


1. git reset --hard
 the above command remove all uncommited change . (Dangerous!!)
 
 2. git reset --hard <SOME-COMMIT> 
 Make your current branch (typically master) back to point at <SOME-COMMIT>.
 Then make the files in your working tree and the index ("staging area") the same as the versions committed in <SOME-COMMIT>.

 3. git clean -f
 remove untracked changes.
 
 
 ---------------Remove all uncommited change---------------------------------------------------------
 https://stackoverflow.com/questions/14075581/git-undo-all-uncommitted-or-unsaved-changes
1. git reset
2. git checkout .
3. git clean -fdx


-------------Edit file that goes in last commited push ----------------
https://medium.com/@igor_marques/git-basics-adding-more-changes-to-your-last-commit-1629344cb9a8


suppose there is a file "Abc.cpp" in which you changed and pushed. Suddenly you realize there should be a small change needed. There are two ways to do it -> i)  Commit and push again with new change
			       ii) edit the last commit and then push 
Second one is better for small changes. It will kepp working tree cleaner. To do this follow the below steps:
i)   git status
ii)  find the desired file name with path like : "modified:  File_Path/Abc.cpp"
iii) git add  File_Path/Abc.cpp
iv)  git commit --amend --no-edit 
*** if you dont want to chage the commit message use above command otherwise use git commit --amend
v)  git push origin "BRANCH_NAME"




---------------------------------------------------------------------------------
			pull vs pull --rebase
----------------------------------------------------------------------------------
https://stackoverflow.com/questions/2472254/when-should-i-use-git-pull-rebase



------------------------------------------------------------------------------------
			All about STASH
------------------------------------------------------------------------------------
1. Find all list of stash - git stash list
2. Stash files using message - git stash push -m "message"
3. Apply particular stash from stash list - git stash apply stash@{Nth}
4. Delete particular stash from list - git stash drop stash@{Nth}
5. Apply and delete stash from stack at a time - git stash pop stash@{Nth}
6. Show stash summary -  git stash show -p



----------------------------------------------------------------------------------------
			Undo Redo Most Recent Commit
----------------------------------------------------------------------------------------
$ git commit -m "Something terribly misguided"             # (1) commit done
$ git reset HEAD~                                          # (2) get back committed changes
<< edit files as necessary >>                              # (3)
$ git add ...                                              # (4) add again
$ git commit -c ORIG_HEAD                                  # (5) commit again



------------------------------------------------------------------------------------------------------------
			discard change of a file / get back to the previous state of a file
------------------------------------------------------------------------------------------------------------
git checkout -- file_name




------------------------------------------------------------------------------------------------------------
			merge conflict
------------------------------------------------------------------------------------------------------------
when merge conflict occurs, our local changes are shown inside the HEAD block and remote changes will be slown after thee ===== block, like below:

<<<<< HEAD
*** here will be our local changes
=====================
Here will be the remote changes
>>>>>>>>


------------------------------------------------------------------------------------------------------------
			untrack a file
------------------------------------------------------------------------------------------------------------
command for untracking a file:
git rm --cached filepath+Name

** after running this command git will not track the file, but it will remain in the file system of computer 



------------------------------------------------------------------------------------------------------------
			go back to a previous commit, then back to the latest commit
------------------------------------------------------------------------------------------------------------

go back to any previous commit:
	git checkout <commit_hash>

** This would detach the head. So, to get back to the latest commit run the following command:
	git checkout BRANCH_NAME
details : https://stackoverflow.com/a/39197098/4245112




------------------------------------------------------------------------------------------------------------
			GIT ALIAS
------------------------------------------------------------------------------------------------------------

* using alias we can shotening git commands
	* cmd : git config --global alias.logo 'log --oneline'
	* after running above command we can use 'git logo' instead of 'git log --oneline'
	* cmd : git config --global alias.cane 'commit --amend --no-edit'
	* after running this command we can use 'git cane' instead of 'git commit --amend --no-edit'
* find list of all alias:
	* cmd : git config --list | grep alias
	* it will show:
		alias.logo=log --oneline
		alias.cane=commit --amend --no-edit


---------------------------------------------------------------------------------------------------------
			go prevoius or next head
---------------------------------------------------------------------------------------------------------
Moving upwards one commit at a time with ^
Moving upwards a number of times with ~<number of times>

----------------------------------------------------------------------------------------------------------
caret ^ operator
----------------------------------------------------------------------------------------------------------

Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.

So saying main^ is equivalent to "the first parent of main".

main^^ is the grandparent (second-generation ancestor) of main

git checkout main^

this will move the head to the parent of main
